<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ConsoleApp</name>
    </assembly>
    <members>
        <member name="T:Common.GameData">
            <summary>
            Class where the GameData is stored.
            </summary>
        </member>
        <member name="P:Common.GameData.PlayerType">
            <summary>
            Gets or sets the player's color.
            </summary>
        </member>
        <member name="P:Common.GameData.AllSlots">
            <summary>
            Gets or sets all the slots in the board (whether are occupied by
            the player or not).
            </summary>
        </member>
        <member name="P:Common.GameData.PlayerLegalPlays">
            <summary>
            Gets or sets of all current possible plays.
            </summary>
        </member>
        <member name="M:Common.GameData.#ctor">
            <summary>
            Initialize the properties.
            </summary>
        </member>
        <member name="T:Common.GameState">
            <summary>
            The class where the game logic is worked.
            </summary>
        </member>
        <member name="F:Common.GameState.board">
            <summary>
            Access the SetBoard class.
            </summary>
        </member>
        <member name="P:Common.GameState.PlayerType">
            <summary>
            Gets or sets the player's color.
            </summary>
        </member>
        <member name="P:Common.GameState.AllSlots">
            <summary>
            Gets or sets all the pieces in the game (whether are occupied by
            the player or not.
            </summary>
        </member>
        <member name="P:Common.GameState.PlayerLegalPlays">
            <summary>
            Gets or sets of all current possible plays for the player.
            </summary>
        </member>
        <member name="P:Common.GameState.IsPlayerFirst">
            <summary>
            Gets or sets a value indicating whether the player is the first to
            play.
            </summary>
        </member>
        <member name="P:Common.GameState.HasPlayerWon">
            <summary>
            Gets or sets a value indicating whether the player has won.
            </summary>
        </member>
        <member name="P:Common.GameState.HasOpponentWon">
            <summary>
            Gets or sets a value indicating whether the opponent has won.
            </summary>
        </member>
        <member name="M:Common.GameState.Start">
            <summary>
            Method to be called in the first frame of the game (like Unity).
            </summary>
        </member>
        <member name="M:Common.GameState.WhoStartsFirst">
            <summary>
            Check who starts first.
            </summary>
            <returns> Returns true whether the player is the first to play.
            </returns>
        </member>
        <member name="M:Common.GameState.CheckPlayerLegalPlays(System.Int32)">
            <summary>
            List all the current possible plays.
            </summary>
            <param name="piece"> Chosen piece.</param>
            <returns> Returns true if there's at least one legal play.
            </returns>
        </member>
        <member name="M:Common.GameState.CheckIfLegal(System.Int32)">
            <summary>
            Checks whether the chosen play is legal.
            </summary>
            <param name="slot"> Chose slot.</param>
            <returns> Returns true whether is legal.</returns>
        </member>
        <member name="M:Common.GameState.PlayerPlay(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Play the chosen play.
            </summary>
            <param name="piece"> The chosen piece.</param>
            <param name="slot"> The chosen slot.</param>
            <param name="isPlayerWhite"> Check whether the player is white.
            </param>
        </member>
        <member name="M:Common.GameState.CheckOpponentLegalPlays(System.Int32)">
            <summary>
            List all current possible plays.
            </summary>
            <param name="piece"> Chosen piece.</param>
            <returns> Returns true whether is legal.</returns>
        </member>
        <member name="M:Common.GameState.OpponentPlay(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Play the chosen piece.
            </summary>
            <param name="piece"> The chosen piece.</param>
            <param name="slot"> The chosen slot.</param>
            <param name="isPlayerWhite"> Check whether the player is white.
            </param>
        </member>
        <member name="M:Common.GameState.EatPiece(System.Int32,System.Int32)">
            <summary>
            Eat the piece.
            </summary>
            <param name="piece"> The chosen piece.</param>
            <param name="slot"> The chosen slot.</param>
        </member>
        <member name="M:Common.GameState.CheckWin">
            <summary>
            Check if there's any victory.
            </summary>
            <returns> Returns Player if the player won or Opponent if the
            opponent won or None if there's no victory yet.</returns>
        </member>
        <member name="M:Common.GameState.#ctor">
            <summary>
            Initialize the variables and properties.
            </summary>
        </member>
        <member name="T:Common.ServiceLocator">
            <summary>
            Class where the GameData is registered (instead of using static
            properties).
            </summary>
        </member>
        <member name="M:Common.ServiceLocator.Register``1(System.Object)">
            <summary>
            Method to register service.
            </summary>
            <typeparam name="T"> Type of service.</typeparam>
            <param name="serviceInstance"> The service instance.</param>
        </member>
        <member name="M:Common.ServiceLocator.GetService``1">
            <summary>
            Method to access service.
            </summary>
            <typeparam name="T"> Service type.</typeparam>
            <returns> Returns service.</returns>
        </member>
        <member name="T:Common.SetBoard">
            <summary>
            Set the game board.
            </summary>
        </member>
        <member name="P:Common.SetBoard.PlayerType">
            <summary>
            Gets or sets the player's color.
            </summary>
        </member>
        <member name="P:Common.SetBoard.AllSlots">
            <summary>
            Gets or sets the list of all slots in the board (whether are
            occupied by the player or not).
            </summary>
        </member>
        <member name="F:Common.SetBoard.gameData">
            <summary>
            Access the GameData class.
            </summary>
        </member>
        <member name="M:Common.SetBoard.Start">
            <summary>
            To be called in the first frame of the game (like Unity).
            </summary>
        </member>
        <member name="M:Common.SetBoard.SetColor">
            <summary>
            Set the colors in the board.
            </summary>
        </member>
        <member name="M:Common.SetBoard.#ctor">
            <summary>
            Initialize the variables and properties.
            </summary>
        </member>
        <member name="T:Common.SlotColors">
            <summary>
            Slot colors in the board.
            </summary>
        </member>
        <member name="F:Common.SlotColors.White">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:Common.SlotColors.Black">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:Common.SlotColors.Grey">
            <summary>
            Grey color.
            </summary>
        </member>
        <member name="T:Common.SlotTypes">
            <summary>
            Types of slots in the board.
            </summary>
        </member>
        <member name="F:Common.SlotTypes.Player">
            <summary>
            Player's piece.
            </summary>
        </member>
        <member name="F:Common.SlotTypes.Opponent">
            <summary>
            Opponent's piece.
            </summary>
        </member>
        <member name="F:Common.SlotTypes.None">
            <summary>
            Empty.
            </summary>
        </member>
        <member name="T:Common.Victory">
            <summary>
             Winner's enum.
            </summary>
        </member>
        <member name="F:Common.Victory.Player">
            <summary>
            The player won.
            </summary>
        </member>
        <member name="F:Common.Victory.Opponent">
            <summary>
            The opponent won.
            </summary>
        </member>
        <member name="F:Common.Victory.None">
            <summary>
            Nobody won yet.
            </summary>
        </member>
        <member name="T:ConsoleApp.DoubleBuffer`1">
            <summary>
            Class that controls the render's update.
            </summary>
            <typeparam name="T"> Type of render.</typeparam>
        </member>
        <member name="P:ConsoleApp.DoubleBuffer`1.XDim">
            <summary>
            Gets a value indicating the width of the current render.
            </summary>
        </member>
        <member name="P:ConsoleApp.DoubleBuffer`1.YDim">
            <summary>
            Gets a value indicating the height of the current render.
            </summary>
        </member>
        <member name="P:ConsoleApp.DoubleBuffer`1.Item(System.Int32,System.Int32)">
            <summary>
            Indexer.
            </summary>
            <param name="x"> Render width.</param>
            <param name="y">Render height.</param>
            <returns> Returns DoubleBuffer.</returns>
        </member>
        <member name="M:ConsoleApp.DoubleBuffer`1.Clear">
            <summary>
            Clear the next render array.
            </summary>
        </member>
        <member name="M:ConsoleApp.DoubleBuffer`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize the variables.
            </summary>
            <param name="x"> Render's width.</param>
            <param name="y"> Render's height.</param>
        </member>
        <member name="M:ConsoleApp.DoubleBuffer`1.Swap">
            <summary>
            Swap the current render with the next render.
            </summary>
        </member>
        <member name="T:ConsoleApp.GameLoop">
            <summary>
            Class where the game loop happens.
            </summary>
        </member>
        <member name="P:ConsoleApp.GameLoop.IsPlayerWhite">
            <summary>
            Gets or sets a value indicating whether the player is white.
            </summary>
        </member>
        <member name="P:ConsoleApp.GameLoop.IsPlayerFirst">
            <summary>
            Gets a value indicating whether the player is the first to play.
            </summary>
        </member>
        <member name="P:ConsoleApp.GameLoop.GetAllSlots">
            <summary>
            Gets or sets all slots in the game (whether are occupied by the
            player or not).
            </summary>
        </member>
        <member name="M:ConsoleApp.GameLoop.Game">
            <summary>
            The game loop.
            </summary>
        </member>
        <member name="M:ConsoleApp.GameLoop.Start">
            <summary>
            First frame of the game (similar to Unity).
            </summary>
        </member>
        <member name="M:ConsoleApp.GameLoop.Update">
            <summary>
            Update each frame while the game isn't over (similar do Unity).
            </summary>
        </member>
        <member name="M:ConsoleApp.GameLoop.CheckUserInput">
            <summary>
            Check the user input.
            </summary>
        </member>
        <member name="M:ConsoleApp.GameLoop.RenderGame(System.Boolean,System.Boolean)">
            <summary>
            Render the game.
            </summary>
            <param name="isPlayer"> Checks whether is the player's turn.
            </param>
            <param name="isOpponent"> Checks whether is the opponent's turn.
            </param>
        </member>
        <member name="M:ConsoleApp.GameLoop.SetColor">
            <summary>
            Set the colors in the game.
            </summary>
        </member>
        <member name="M:ConsoleApp.GameLoop.#ctor(System.Boolean)">
            <summary>
            Initialize the property.
            </summary>
            <param name="isPlayerWhite"> Checks whether the player is white.
            </param>
        </member>
        <member name="T:ConsoleApp.OpponentTurn">
            <summary>
            Class that takes care of the opponent's turn.
            </summary>
        </member>
        <member name="P:ConsoleApp.OpponentTurn.IsPlayed">
            <summary>
            Gets or sets a value indicating whether the turn is over.
            </summary>
        </member>
        <member name="M:ConsoleApp.OpponentTurn.OpponentPlay(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Play the turn.
            </summary>
            <param name="piece"> Chosen piece.</param>
            <param name="slot"> Chosen slot.</param>
            <param name="isPlayerWhite"> Check whether the player is white.
            </param>
        </member>
        <member name="M:ConsoleApp.OpponentTurn.ChoosePiece(System.Int32)">
            <summary>
            Choose a piece and list all possible legal plays.
            </summary>
            <param name="piece"> Chosen piece.</param>
            <returns> Returns true if the piece is legal.</returns>
        </member>
        <member name="M:ConsoleApp.OpponentTurn.CheckIfLegal(System.Int32)">
            <summary>
            Check if the chosen play is legal.
            </summary>
            <param name="slot"> Chosen slot.</param>
            <returns> Returns true if the chosen play is legal. </returns>
        </member>
        <member name="M:ConsoleApp.OpponentTurn.PlayPiece(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Play the piece.
            </summary>
            <param name="piece"> Chosen piece. </param>
            <param name="slot"> Chosen slot. </param>
            <param name="isPlayerWhite"> Checks whether the player is white.
            </param>
        </member>
        <member name="M:ConsoleApp.OpponentTurn.#ctor">
            <summary>
            Initialize the variables and properties.
            </summary>
        </member>
        <member name="T:ConsoleApp.PlayerTurn">
            <summary>
            Class that takes care of the player's turn.
            </summary>
        </member>
        <member name="P:ConsoleApp.PlayerTurn.IsPlayed">
            <summary>
            Gets or sets a value indicating whether the turn is over.
            </summary>
        </member>
        <member name="M:ConsoleApp.PlayerTurn.PlayerPlay(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Play the turn.
            </summary>
            <param name="piece"> Chosen piece.</param>
            <param name="slot"> Chosen slot.</param>
            <param name="isPlayerWhite"> Check whether the player is white.
            </param>
        </member>
        <member name="M:ConsoleApp.PlayerTurn.ChoosePiece(System.Int32)">
            <summary>
            Choose a piece and list all possible legal plays.
            </summary>
            <param name="piece"> Chosen piece.</param>
            <returns> Returns true if the piece is legal.</returns>
        </member>
        <member name="M:ConsoleApp.PlayerTurn.CheckIfLegal(System.Int32)">
            <summary>
            Check if the chosen play is legal.
            </summary>
            <param name="slot"> Chosen slot.</param>
            <returns> Returns true if the chosen play is legal. </returns>
        </member>
        <member name="M:ConsoleApp.PlayerTurn.PlayPiece(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Play the piece.
            </summary>
            <param name="piece"> Chosen piece. </param>
            <param name="slot"> Chosen slot. </param>
            <param name="isPlayerWhite"> Checks whether the player is white.
            </param>
        </member>
        <member name="M:ConsoleApp.PlayerTurn.#ctor">
            <summary>
            Initialize the variables and properties.
            </summary>
        </member>
        <member name="T:ConsoleApp.Render">
            <summary>
            Class where the game is rendered.
            </summary>
        </member>
        <member name="P:ConsoleApp.Render.Slots">
            <summary>
            Gets or sets the board slot characters.
            </summary>
        </member>
        <member name="M:ConsoleApp.Render.RenderGame">
            <summary>
            Render the game.
            </summary>
        </member>
        <member name="M:ConsoleApp.Render.InitDoubleBuffer">
            <summary>
            Initialize the double buffer.
            </summary>
        </member>
        <member name="M:ConsoleApp.Render.PrintToScreen(ConsoleApp.DoubleBuffer{System.Char})">
            <summary>
            Print the board to the screen.
            </summary>
            <param name="db"> The DOubleBuffer instance. </param>
        </member>
        <member name="M:ConsoleApp.Render.PrintStatic">
            <summary>
            Print the stuff that doesn't change to the screen.
            </summary>
        </member>
        <member name="M:ConsoleApp.Render.#ctor">
            <summary>
            Initialize the variable.
            </summary>
        </member>
        <member name="T:ConsoleApp.Update">
            <summary>
            Class where the logic of the game is updated.
            </summary>
        </member>
        <member name="P:ConsoleApp.Update.IsPlayer">
            <summary>
            Gets a value indicating whether is the player's turn.
            </summary>
        </member>
        <member name="P:ConsoleApp.Update.IsOpponent">
            <summary>
            Gets a value indicating whether is the opponent's turn.
            </summary>
        </member>
        <member name="T:ConsoleApp.Update.CheckWin">
            <summary>
            Delegate of the win checker method.
            </summary>
            <returns> Returns an enum to point if someone won.</returns>
        </member>
        <member name="T:ConsoleApp.Update.RenderGame">
            <summary>
            Delegate of the render game method.
            </summary>
            <param name="isPlayer"> Check whether is the player's turn.</param>
            <param name="isOpponent"> Check wthether is the opponent's turn.
            </param>
        </member>
        <member name="T:ConsoleApp.Update.CheckUserInput">
            <summary>
            Delegate of the check user input.
            </summary>
        </member>
        <member name="P:ConsoleApp.Update.GetAllSlots">
            <summary>
            Gets or sets all the slots in the game (whether are occupied by
            the player or not).
            </summary>
        </member>
        <member name="M:ConsoleApp.Update.UpdateGame(System.Collections.Generic.List{System.Tuple{Common.SlotTypes,Common.SlotColors}})">
            <summary>
            Update the logic of the game.
            </summary>
            <param name="slots"> All slots in the game (whether are occupied by
            the player or not).</param>
        </member>
        <member name="M:ConsoleApp.Update.OpponentFirst">
            <summary>
            GameLoop if the opponent is the first to play in the game.
            </summary>
        </member>
        <member name="M:ConsoleApp.Update.PlayerFirst">
            <summary>
            GameLoop if the player is the first to play in the game.
            </summary>
        </member>
        <member name="M:ConsoleApp.Update.OpponentPlay">
            <summary>
            Method of the opponent's play.
            </summary>
        </member>
        <member name="M:ConsoleApp.Update.PlayerPlay">
            <summary>
            Method of the player's play.
            </summary>
        </member>
        <member name="M:ConsoleApp.Update.SetColor">
            <summary>
            Update the colors in the board.
            </summary>
        </member>
        <member name="M:ConsoleApp.Update.#ctor(System.Boolean,System.Boolean,ConsoleApp.Update.CheckWin,ConsoleApp.Update.RenderGame,ConsoleApp.Update.CheckUserInput,System.Boolean,System.Boolean)">
            <summary>
            Initialize the variables.
            </summary>
            <param name="isPlayerFirst"> Checks whether the player is the first
            to play.</param>
            <param name="isPlayerWhite"> Checks whether the player is white.
            </param>
            <param name="checkWin"> The method to check if there's a win.
            </param>
            <param name="renderGame"> The method to render the game.</param>
            <param name="checkUserInput"> The method to check and read the
            user's input.</param>
            <param name="isPlayer"> Checks whether it's the player's turn.
            </param>
            <param name="isOpponent"> Checks whether it's the opponent's turn.
            </param>
        </member>
        <member name="T:ConsoleApp.UserInput">
            <summary>
            Class where is read the user input.
            </summary>
        </member>
        <member name="P:ConsoleApp.UserInput.Piece">
            <summary>
            Gets or sets the piece chosen by the player.
            </summary>
        </member>
        <member name="P:ConsoleApp.UserInput.Slot">
            <summary>
            Gets or sets the slot chosen by the player.
            </summary>
        </member>
        <member name="M:ConsoleApp.UserInput.CheckUserInput">
            <summary>
            Check the player's input.
            </summary>
        </member>
        <member name="T:ConsoleApp.GameResult">
            <summary>
            Class where the game result is shown.
            </summary>
        </member>
        <member name="M:ConsoleApp.GameResult.ShowGameResult(System.Boolean)">
            <summary>
            Show the game's result.
            </summary>
            <param name="hasPlayerWon"> Check whether the player has won.
            </param>
        </member>
        <member name="M:ConsoleApp.GameResult.Exit">
            <summary>
            Exit game.
            </summary>
        </member>
        <member name="T:ConsoleApp.Intro">
            <summary>
            Intro class.
            </summary>
        </member>
        <member name="M:ConsoleApp.Intro.PlayIntro">
            <summary>
            Play the intro.
            </summary>
        </member>
        <member name="T:ConsoleApp.Menu">
            <summary>
            Main menu class.
            </summary>
        </member>
        <member name="M:ConsoleApp.Menu.MainMenu">
            <summary>
            Method where the main menu is played.
            </summary>
        </member>
        <member name="M:ConsoleApp.Menu.Instructions">
            <summary>
             Instructions page.
            </summary>
        </member>
        <member name="M:ConsoleApp.Menu.Credits">
            <summary>
            Página dos créditos.
            </summary>
        </member>
        <member name="M:ConsoleApp.Menu.Exit">
            <summary>
            Exit game.
            </summary>
        </member>
        <member name="M:ConsoleApp.Menu.#ctor">
            <summary>
            Initialize variables.
            </summary>
        </member>
        <member name="T:ConsoleApp.SetupGame">
            <summary>
            Class where the player chooses his color.
            </summary>
        </member>
        <member name="M:ConsoleApp.SetupGame.SetGame">
            <summary>
            Set the game.
            </summary>
        </member>
        <member name="M:ConsoleApp.SetupGame.PickColor">
            <summary>
            Choose a color.
            </summary>
            <returns> Checks whether the white color was chosen. </returns>
        </member>
        <member name="T:ConsoleApp.SplashScreen">
            <summary>
            Class of the splashscreen.
            </summary>
        </member>
        <member name="M:ConsoleApp.SplashScreen.PlaySplashScreen">
            <summary>
            Play the splashscreen.
            </summary>
        </member>
        <member name="T:ConsoleApp.Program">
            <summary>
            Begin the game.
            </summary>
        </member>
        <member name="M:ConsoleApp.Program.Main">
            <summary>
            Call the main menu.
            </summary>
        </member>
    </members>
</doc>
